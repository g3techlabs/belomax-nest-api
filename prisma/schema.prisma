// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AutomationType {
  CONTRACHEQUE_PENSIONISTAS
  TERMOS_EXTRATO
}

enum AutomationStatus {
  PENDING
  FINISHED
  CANCELLED
  FAILED
}

enum PensionerPaycheckTermType {
  BENEFIT
  DISCOUNT
}

enum StatementBank {
  BB
  BRADESCO
  CAIXA
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  name     String
  password String
  role     String @default("USER")

  automations Automation[]
  resetToken  ResetToken?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model ResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  token     String   @db.VarChar(6)
  expiresAt DateTime @default(dbgenerated("NOW() + interval '15 minutes'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reset_token")
}

model Customer {
  id            String    @id @default(uuid())
  name          String
  cpf           String    @unique @db.VarChar(11)
  rg            String?   @unique
  address       String?
  citizenship   String?
  maritalStatus String?
  occupation    String?
  email         String?
  phone         String?
  birthDate     DateTime?

  automations Automation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer")
}

model Automation {
  id          String @id @default(uuid())
  description String

  status AutomationStatus @default(PENDING)

  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  documents Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statementExtract  StatementExtract?
  pensionerPaycheck PensionerPaycheck?

  @@map("automation")
}

model Document {
  id           String     @id @default(uuid())
  name         String
  url          String
  automationId String
  automation   Automation @relation(fields: [automationId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("document")
}

model PensionerPaycheck {
  id String @id @default(uuid())

  registration    String
  bond            String
  cpf             String @db.VarChar(11)
  pensionerNumber String
  month           String
  year            String

  consignableMargin Float
  totalBenefits     Float
  netToReceive      Float

  automationId String     @unique
  automation   Automation @relation(fields: [automationId], references: [id])

  terms PensionerPaycheckTerm[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pensioner_paycheck")
}

model PensionerPaycheckTerm {
  id String @id @default(uuid())

  month String
  year  String

  type           PensionerPaycheckTermType
  code           Int
  discrimination String
  value          Float

  pensionerPaycheckId String
  pensionerPaycheck   PensionerPaycheck @relation(fields: [pensionerPaycheckId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pensioner_paycheck_term")
}

model StatementTerm {
  id          String @id @default(uuid())
  description String

  bank   StatementBank
  active Boolean

  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  StatementTermsToExtract StatementTermToExtract[]

  @@unique([description, bank])
  @@map("statement_terms")
}

model StatementTermToExtract {
  id              String        @id @default(uuid())
  statementTermId String
  statementTerm   StatementTerm @relation(fields: [statementTermId], references: [id])

  statementExtractId String
  statementExtract   StatementExtract @relation(fields: [statementExtractId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("statement_terms_to_extract")
}

model StatementExtract {
  id           String     @id @default(uuid())
  automationId String     @unique
  automation   Automation @relation(fields: [automationId], references: [id])

  bank          StatementBank
  selectedTerms StatementTermToExtract[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("statement_extract")
}
